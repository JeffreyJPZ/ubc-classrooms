services:
  db:
    image: postgres:16.3
    ports:
      - 5432:5432
    env_file:
      - dev.env
    volumes:
      - ./backend/data/db_dev:/var/lib/postgresql/data
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    env_file:
      - dev.env
    volumes:
      - ./backend:/src
    ports:
      - 8000:8000
    command: python manage.py runserver 0.0.0.0:8000
    depends_on:
      db:
        condition: service_healthy

  scrape-classrooms:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend/data/raw_booking_data:/raw_booking_data
    command: python scripts/scrape_classrooms.py

  compute-timeslots:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend/data/raw_booking_data:/raw_booking_data
      - ./backend/data/timeslot_data:/timeslot_data
    command: python scripts/compute_timeslots.py

  create-models:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    env_file:
      - dev.env
    volumes:
      - ./backend/data/raw_booking_data:/raw_booking_data
      - ./backend/data/timeslot_data:/timeslot_data
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py create_models"
    depends_on:
      db:
        condition: service_healthy

  delete-expired-timeslots:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    env_file:
      - dev.env
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py delete_expired_timeslots"
    depends_on:
      db:
        condition: service_healthy
      
  api-tests:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    env_file:
      - dev.env
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py test api.tests"
    depends_on:
      db:
        condition: service_healthy