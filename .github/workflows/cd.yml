name: cd

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - '**.md'
      - '**.bat'
      - '**.sh'
      - '**.gitignore'
  pull_request:
    branches:
      - main
    types:
      - closed
    paths-ignore:
      - '.github/**'
      - '**.md'
      - '**.bat'
      - '**.sh'
      - '**.gitignore'

jobs:
  make-tags:
    name: Generate tag names using datetime
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.make-tag.outputs.tag }}
    
    steps:
      - name: Get datetime
        id: get-datetime
        run: echo "now=$(date "+%Y%m%dT%H%M%S")" >> $GITHUB_OUTPUT
      
      - name: Generate tag name
        id: make-tag
        run: echo "tag=${{ steps.get-datetime.outputs.now }}" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build Docker images and push to registry
    needs: make-tags
    runs-on: ubuntu-latest
    environment: production
    env:
      TAG: ${{ needs.make-tags.outputs.tag }}
      SQL_ENGINE: ${{ secrets.SQL_ENGINE }}
      SQL_DB: ${{ secrets.SQL_DB_PROD }}
      SQL_USER: ${{ secrets.SQL_USER }}
      SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
      SQL_HOST: ${{ secrets.SQL_HOST }}
      SQL_PORT: ${{ secrets.SQL_PORT }}
      DB: ${{ secrets.DB }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB_PROD }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DEBUG: ${{ vars.DEBUG }}
      DJANGO_ALLOWED_HOSTS: ${{ vars.DJANGO_ALLOWED_HOSTS }}
      DJANGO_PROD_SECRET_KEY: ${{ secrets.DJANGO_PROD_SECRET_KEY}}
      CERTBOT_EMAIL: ${{ secrets.CERTBOT_EMAIL }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependenies
        run: |
          cd frontend && sudo npm ci

      - name: Give permissions for building dist files
        run: |
          sudo chmod u+x ./frontend/node_modules/.bin/vite
          sudo chmod u+x ./frontend/node_modules/.bin/tsc

      - name: Create production .env file for frontend
        run: |
          touch frontend/.env.production
          echo VITE_MAPBOX_ACCESS_TOKEN=$VITE_MAPBOX_ACCESS_TOKEN >> frontend/.env.production

      - name: Create production .env file for backend
        run: |
          touch prod.env
          echo SQL_ENGINE=$SQL_ENGINE >> prod.env
          echo SQL_DB=$SQL_DB >> prod.env
          echo SQL_USER=$SQL_USER >> prod.env
          echo SQL_PASSWORD=$SQL_PASSWORD >> prod.env
          echo SQL_HOST=SQL_HOST >> prod.env
          echo SQL_PORT=$SQL_PORT >> prod.env
          echo DB=$DB >> prod.env
          echo POSTGRES_DB=$POSTGRES_DB >> prod.env
          echo POSTGRES_USER=$POSTGRES_USER >> prod.env
          echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> prod.env
          echo DEBUG=$DEBUG >> prod.env
          echo DJANGO_ALLOWED_HOSTS=$DJANGO_ALLOWED_HOSTS >> prod.env
          echo DJANGO_PROD_SECRET_KEY=$DJANGO_PROD_SECRET_KEY >> prod.env
          echo CERTBOT_EMAIL=$CERTBOT_EMAIL >> prod.env
          echo DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME >> prod.env
          echo DOCKERHUB_TOKEN=$DOCKERHUB_TOKEN >> prod.env

      - name: Build images
        run: docker compose -f compose.prod.yml build

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull remaining images
        run: docker compose -f compose.prod.yml pull db certbot

      - name: Tag and push images
        run: |
          docker tag postgres:16.3 ubcclassrooms/db:$TAG
          docker tag postgres:16.3 ubcclassrooms/db:latest
          docker push ubcclassrooms/db --all-tags
          docker tag ubc-classrooms-web ubcclassrooms/web:$TAG
          docker tag ubc-classrooms-web ubcclassrooms/web:latest
          docker push ubcclassrooms/web --all-tags
          docker tag ubc-classrooms-nginx ubcclassrooms/nginx:$TAG
          docker tag ubc-classrooms-nginx ubcclassrooms/nginx:latest
          docker push ubcclassrooms/nginx --all-tags
          docker tag certbot/certbot ubcclassrooms/certbot:$TAG
          docker tag certbot/certbot ubcclassrooms/certbot:latest
          docker push ubcclassrooms/certbot --all-tags
          docker tag ubc-classrooms-scrape-classrooms ubcclassrooms/scrape-classrooms:$TAG
          docker tag ubc-classrooms-scrape-classrooms ubcclassrooms/scrape-classrooms:latest
          docker push ubcclassrooms/scrape-classrooms --all-tags
          docker tag ubc-classrooms-compute-timeslots ubcclassrooms/compute-timeslots:$TAG
          docker tag ubc-classrooms-compute-timeslots ubcclassrooms/compute-timeslots:latest
          docker push ubcclassrooms/compute-timeslots --all-tags
          docker tag ubc-classrooms-create-models ubcclassrooms/create-models:$TAG
          docker tag ubc-classrooms-create-models ubcclassrooms/create-models:latest
          docker push ubcclassrooms/create-models --all-tags
          docker tag ubc-classrooms-delete-expired-timeslots ubcclassrooms/delete-expired-timeslots:$TAG
          docker tag ubc-classrooms-delete-expired-timeslots ubcclassrooms/delete-expired-timeslots:latest
          docker push ubcclassrooms/delete-expired-timeslots --all-tags
          docker tag ubc-classrooms-api-tests ubcclassrooms/api-tests:$TAG
          docker tag ubc-classrooms-api-tests ubcclassrooms/api-tests:latest
          docker push ubcclassrooms/api-tests --all-tags
