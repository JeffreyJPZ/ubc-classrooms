services:
  db:
    image: postgres:16.3
    expose:
      - 5432
    env_file:
      - prod.env
    volumes:
      - ./backend/data/db_prod:/var/lib/postgresql/data
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  web:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    expose:
      - 8000
    env_file:
      - prod.env
    volumes:
      - ./backend:/src
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
  
  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports: 
      - 80:80
      - 443:443
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./certbot/www:/var/www/certbot
      - ./certbot/certs:/etc/nginx/ssl
    restart: unless-stopped
    depends_on:
      - web
  
  certbot:
    image: certbot/certbot
    ports: 
      - 80:80
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/certs:/etc/letsencrypt
    depends_on:
      - nginx

  scrape-classrooms:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    volumes:
      - ./backend/data/raw_booking_data:/raw_booking_data
    command: python scripts/scrape_classrooms.py

  compute-timeslots:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    volumes:
      - ./backend/data/raw_booking_data:/raw_booking_data
      - ./backend/data/timeslot_data:/timeslot_data
    command: python scripts/compute_timeslots.py

  create-models:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file:
      - prod.env
    volumes:
      - ./backend/data/raw_booking_data:/raw_booking_data
      - ./backend/data/timeslot_data:/timeslot_data
    command: python manage.py create_models
    depends_on:
      db:
        condition: service_healthy

  delete-expired-timeslots:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file:
      - prod.env
    command: python manage.py delete_expired_timeslots
    depends_on:
      db:
        condition: service_healthy
      
  api-tests:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file:
      - prod.env
    command: python manage.py test api.tests
    depends_on:
      db:
        condition: service_healthy